upstream <%= "#{@sitename}_unicorn" %> {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  # for UNIX domain socket setups:
  server unix:/tmp/<%= @sitename %>.socket fail_timeout=0;
}

server {

    # You know... for uploads
    client_max_body_size       50M;
    client_body_buffer_size    128k;

    # if you're running multiple servers, instead of "default" you should
    # put your main domain name here
    listen 80;

    # you could put a list of other domain names this application answers
    server_name <%= @domains.join(' ') %>;
    access_log /var/log/nginx/<%= @sitename %>.log;
    rewrite_log on;


    root <%= @deploy_path %>/<%= @sitename %>/current/public;
    index        index.html index.htm;

    try_files  $uri/index.html $uri.html $uri @unicorn;

    # if the request is for a static resource, nginx should serve it directly
    # and add a far future expires header to it, making the browser
    # cache the resource and navigate faster over the website
    # this probably needs some work with Rails 3.1's asset pipe_line
    location ~ ^/(assets|images|javascripts|stylesheets|system)/  {
      expires max;
      add_header Cache-Control public;
      break;
    }

    location @unicorn {
        #all requests are sent to the UNIX socket
        proxy_pass  http://<%= "#{@sitename}_unicorn" %>;
        proxy_redirect     off;

        proxy_set_header   Host             $host;
        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;

        proxy_connect_timeout      90;
        proxy_send_timeout         90;
        proxy_read_timeout         90;

        proxy_buffer_size          4k;
        proxy_buffers              4 32k;
        proxy_busy_buffers_size    64k;
        proxy_temp_file_write_size 64k;
    }

}